import curses

def material_selection(stdscr):
    # Clear screen
    stdscr.clear()
    
    # List of materials
    materials = ["Mild Steel", "Aluminum", "Stainless Steel"]

    # Dictionary of speed values based on material thickness (in inches/minute)
    speed_library = {
        "Mild Steel": [
            (0, 100),  # Thickness 0 -> Speed 100 inches/min
            (0.2, 80),  # Thickness 0.2 -> Speed 80 inches/min
            (0.5, 50),  # Thickness 0.5 -> Speed 50 inches/min
            (1, 30)     # Thickness 1 -> Speed 30 inches/min
        ],
        "Aluminum": [
            (0, 120),
            (0.2, 100),
            (0.5, 60),
            (1, 40)
        ],
        "Stainless Steel": [
            (0, 90),
            (0.2, 70),
            (0.5, 40),
            (1, 20)
        ],
    }

    # Air Pressure library (in PSI)
    air_pressure_library = {
        "Mild Steel": [
            (0, 5),    # Thickness 0 -> Air Pressure 5 PSI
            (0.2, 4.5),
            (0.5, 4),
            (1, 3.5)
        ],
        "Aluminum": [
            (0, 6),
            (0.2, 5.5),
            (0.5, 5),
            (1, 4.5)
        ],
        "Stainless Steel": [
            (0, 5),
            (0.2, 4.5),
            (0.5, 4),
            (1, 3)
        ],
    }

    # Voltage library (in Volts)
    voltage_library = {
        "Mild Steel": [
            (0, 200),  # Thickness 0 -> Voltage 200V
            (0.2, 180),
            (0.5, 160),
            (1, 140)
        ],
        "Aluminum": [
            (0, 220),
            (0.2, 200),
            (0.5, 180),
            (1, 160)
        ],
        "Stainless Steel": [
            (0, 210),
            (0.2, 190),
            (0.5, 170),
            (1, 150)
        ],
    }

    # Display the material options
    stdscr.addstr(0, 0, "Select your material type (use arrow keys to navigate and Enter to select):\n")
    for idx, material in enumerate(materials):
        stdscr.addstr(idx + 1, 0, f"{idx + 1}. {material}")
    
    # Wait for user input
    current_option = 0
    while True:
        # Highlight the selected option
        for idx, material in enumerate(materials):
            if idx == current_option:
                stdscr.addstr(idx + 1, 0, f"> {idx + 1}. {material}", curses.A_REVERSE)
            else:
                stdscr.addstr(idx + 1, 0, f"  {idx + 1}. {material}")
        
        stdscr.refresh()
        
        # Capture user input
        key = stdscr.getch()
        
        if key == curses.KEY_DOWN:  # Down arrow key
            current_option = (current_option + 1) % len(materials)
        elif key == curses.KEY_UP:  # Up arrow key
            current_option = (current_option - 1) % len(materials)
        elif key == 10:  # Enter key
            break

    # Clear screen and display the selected material
    selected_material = materials[current_option]
    stdscr.clear()
    stdscr.addstr(f"\nYou selected: {selected_material}\n")
    
    # Ask for the material thickness
    while True:
        stdscr.addstr("\nEnter material thickness (between 0 and 1): ")
        stdscr.refresh()

        # Capture user input for thickness
        thickness = ""
        while True:
            key = stdscr.getch()
            if key == 10:  # Enter key
                break
            elif key == 127:  # Backspace key
                thickness = thickness[:-1]
                stdscr.addstr(1, 0, "Enter material thickness (between 0 and 1): " + thickness)
                stdscr.refresh()
            else:
                thickness += chr(key)
                stdscr.addstr(1, 0, "Enter material thickness (between 0 and 1): " + thickness)
                stdscr.refresh()

        # Validate thickness input
        try:
            thickness_value = float(thickness)
            if 0 < thickness_value <= 1:
                stdscr.clear()
                stdscr.addstr(f"\nYou selected a thickness of {thickness_value} for {selected_material}.\n")
                
                # Find the speed by interpolating (in inches/min)
                material_speeds = speed_library[selected_material]
                speed = None
                for i in range(len(material_speeds) - 1):
                    x0, y0 = material_speeds[i]
                    x1, y1 = material_speeds[i + 1]
                    if x0 <= thickness_value <= x1:
                        speed = y0 + (thickness_value - x0) * (y1 - y0) / (x1 - x0)
                        break

                # Interpolate air pressure (in PSI)
                air_pressure = None
                air_pressure_values = air_pressure_library[selected_material]
                for i in range(len(air_pressure_values) - 1):
                    x0, y0 = air_pressure_values[i]
                    x1, y1 = air_pressure_values[i + 1]
                    if x0 <= thickness_value <= x1:
                        air_pressure = y0 + (thickness_value - x0) * (y1 - y0) / (x1 - x0)
                        break

                # Interpolate voltage (in Volts)
                voltage = None
                voltage_values = voltage_library[selected_material]
                for i in range(len(voltage_values) - 1):
                    x0, y0 = voltage_values[i]
                    x1, y1 = voltage_values[i + 1]
                    if x0 <= thickness_value <= x1:
                        voltage = y0 + (thickness_value - x0) * (y1 - y0) / (x1 - x0)
                        break

                # Output the results
                if speed is not None and air_pressure is not None and voltage is not None:
                    stdscr.addstr(f"\nThe recommended cutting speed for this material and thickness is: {speed:.2f} inches/min.\n")
                    stdscr.addstr(f"The recommended air pressure is: {air_pressure:.2f} PSI.\n")
                    stdscr.addstr(f"The recommended voltage is: {voltage:.2f} V.\n")
                else:
                    stdscr.addstr(f"\nNo parameter values found for this thickness.\n")
                
                stdscr.refresh()
                break
            else:
                stdscr.clear()
                stdscr.addstr("\nPlease enter a valid thickness between 0 and 1.\n")
                stdscr.refresh()
        except ValueError:
            stdscr.clear()
            stdscr.addstr("\nInvalid input. Please enter a valid number between 0 and 1.\n")
            stdscr.refresh()

    # Wait for user to acknowledge and exit
    stdscr.getch()

# Initialize curses
curses.wrapper(material_selection)
